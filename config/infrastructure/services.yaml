# Services configuration with dynamic service names

# Define common service properties as YAML anchors
common: &common_defaults
  extra_build_packages: ""
  extra_runtime_packages: ""

# CPU service defaults
cpu_defaults: &cpu_defaults
  <<: *common_defaults
  build_type: "cpu"

# GPU service defaults
gpu_defaults: &gpu_defaults
  <<: *common_defaults
  build_type: "gpu"

# Services Configuration
services:
  # CPU services
  cpu:
    app:
      <<: *cpu_defaults
      type: &app_type "app"
      name: &app_name "app"
      container_name: "fks_${app_name}"
      port: &app_port 9000
      healthcheck_cmd: "curl --fail http://localhost:${app_port}/health || exit 1"
      image_tag: "nuniesmith/fks:${app_name}"
      requirements_path: "${REQUIREMENTS_PATH_PREFIX}/${app_name}/requirements.txt"

    api:
      <<: *cpu_defaults
      type: &api_type "api"
      name: &api_name "api"
      container_name: "fks_${api_name}"
      port: &api_port 8000
      healthcheck_cmd: "curl --fail http://localhost:${api_port}/health || exit 1"
      image_tag: "nuniesmith/fks:${api_name}"
      requirements_path: "${REQUIREMENTS_PATH_PREFIX}/${api_name}/requirements.txt"
      extra_runtime_packages: "netcat-openbsd"

    worker:
      <<: *cpu_defaults
      type: &worker_type "worker"
      name: &worker_name "worker"
      container_name: "fks_${worker_name}"
      port: &worker_port 8001
      healthcheck_cmd: "curl --fail http://localhost:${worker_port}/health || exit 1"
      image_tag: "nuniesmith/fks:${worker_name}"
      requirements_path: "${REQUIREMENTS_PATH_PREFIX}/${worker_name}/requirements.txt"

    data:
      <<: *cpu_defaults
      type: &data_type "data"
      name: &data_name "data"
      container_name: "fks_${data_name}"
      port: &data_port 9001
      healthcheck_cmd: "curl --fail http://localhost:${data_port}/health || exit 1"
      image_tag: "nuniesmith/fks:${data_name}"
      requirements_path: "${REQUIREMENTS_PATH_PREFIX}/${data_name}/requirements.txt"

    nginx:
      <<: *cpu_defaults
      name: &nginx_name "nginx"
      container_name: "fks_${nginx_name}"
      port: &nginx_port 80
      ssl_port: 443
      healthcheck_cmd: "curl --silent --fail http://localhost:${nginx_port}/health || exit 1"
      image_tag: "nuniesmith/fks:${nginx_name}"

  # GPU services
  gpu:
    trainer:
      <<: *gpu_defaults
      type: &trainer_type "trainer"
      name: &trainer_name "trainer"
      container_name: "fks_${trainer_name}"
      port: &trainer_port 9900
      healthcheck_cmd: "curl --fail http://localhost:${trainer_port}/health || nvidia-smi > /dev/null || exit 1"
      image_tag: "nuniesmith/fks:${trainer_name}"
      requirements_path: "${REQUIREMENTS_PATH_PREFIX}/${trainer_name}/requirements.txt"

# Service templates for Docker Compose
service_templates:
  # Base template for all services
  base: &service_base
    build:
      context: .
      dockerfile: ${COMMON_DOCKERFILE_PATH:-./deployment/docker/Dockerfile}
      args:
        - SERVICE_TYPE=${SERVICE_TYPE}
        - SERVICE_PORT=${SERVICE_PORT}
        - APP_VERSION=${APP_VERSION:-1.0.0}
        - APP_ENV=${APP_ENV:-development}
        - APP_LOG_LEVEL=${APP_LOG_LEVEL:-INFO}
        - USER_NAME=${USER_NAME:-appuser}
        - USER_ID=${USER_ID:-1088}
        - GROUP_ID=${GROUP_ID:-1088}
    volumes:
      - ./:/app
      - ./config:/app/config
      - ./data:/app/data
      - ./models:/app/models
      - ./output:/app/outputs
    healthcheck:
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-10s}
      retries: ${HEALTHCHECK_RETRIES:-3}
      start_period: ${HEALTHCHECK_START_PERIOD:-10s}
    restart: unless-stopped

  # CPU service template
  cpu_service: &cpu_service_template
    <<: *service_base
    environment:
      - SERVICE_TYPE=${SERVICE_TYPE}
      - SERVICE_PORT=${SERVICE_PORT}
      - SERVICE_NAME=${SERVICE_NAME}
      - APP_ENV=${APP_ENV:-development}
      - APP_LOG_LEVEL=${APP_LOG_LEVEL:-INFO}
      - PYTHONPATH=${PYTHONPATH:-/app/src}
    networks:
      - backend_network
      - frontend_network

  # GPU service template
  gpu_service: &gpu_service_template
    <<: *service_base
    environment:
      - SERVICE_TYPE=${SERVICE_TYPE}
      - SERVICE_PORT=${SERVICE_PORT}
      - SERVICE_NAME=${SERVICE_NAME}
      - APP_ENV=${APP_ENV:-development}
      - APP_LOG_LEVEL=${APP_LOG_LEVEL:-INFO}
      - PYTHONPATH=${PYTHONPATH:-/app/src}
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    networks:
      - backend_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
