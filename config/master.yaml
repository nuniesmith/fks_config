# =============================================================================
# FKS Trading Systems - Master Configuration
# =============================================================================
# This file consolidates all configuration settings for services, Docker,
# Kubernetes, and environment variables into a single source of truth
# =============================================================================

# System Configuration
system:
  name: "FKS Trading Systems"
  version: "1.0.0"
  description: "Unified trading framework with multi-service architecture"
  
  # Domain configuration
  domain:
    base: "fkstrading.xyz"
    subdomains:
      api: "api.fkstrading.xyz"
      app: "app.fkstrading.xyz"
      web: "fkstrading.xyz"  # Main website
      data: "data.fkstrading.xyz"
      monitoring: "monitor.fkstrading.xyz"
      grafana: "grafana.fkstrading.xyz"
      prometheus: "metrics.fkstrading.xyz"
      training: "ml.fkstrading.xyz"
      docs: "docs.fkstrading.xyz"
  
  # Deployment environments
  environments:
    development:
      debug: true
      log_level: DEBUG
      hot_reload: true
      resource_multiplier: 0.5
      domain_suffix: "-dev"  # e.g., api-dev.fkstrading.xyz
    staging:
      debug: false
      log_level: INFO
      hot_reload: false
      resource_multiplier: 0.75
      domain_suffix: "-staging"  # e.g., api-staging.fkstrading.xyz
    production:
      debug: false
      log_level: WARNING
      hot_reload: false
      resource_multiplier: 1.0
      domain_suffix: ""  # No suffix for production

# Docker Configuration
docker:
  registry: "${DOCKER_REGISTRY:-docker.io}"
  namespace: "${DOCKER_NAMESPACE:-nuniesmith}"
  
  # Common build settings
  build:
    python_version: "3.12-slim"
    rust_version: "1.86.0"
    cuda_version: "12.8.0"
    ubuntu_version: "24.04"
    timezone: "${TZ:-America/New_York}"
    
  # Common runtime settings
  runtime:
    user: "appuser"
    user_id: 1088
    group_id: 1088
    pythonpath: "/app/src"
    
  # Network configuration
  networks:
    - name: "fks_network"
      driver: "bridge"
      internal: false
    - name: "frontend"
      driver: "bridge"
      internal: false
    - name: "backend"
      driver: "bridge"
      internal: true
      
  # Volume configuration
  volumes:
    - name: "postgres_data"
      driver: "local"
    - name: "redis_data"
      driver: "local"
    - name: "app_data"
      driver: "local"
    - name: "app_logs"
      driver: "local"

# Service Definitions
services:
  # Infrastructure Services
  infrastructure:
    postgres:
      image: "postgres:16-alpine"
      container_name: "fks_postgres"
      environment:
        POSTGRES_DB: "${POSTGRES_DB:-financial_data}"
        POSTGRES_USER: "${POSTGRES_USER:-postgres}"
        POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-fks_postgres_2025_secure!}"
      ports:
        - "${POSTGRES_PORT:-5432}:5432"
      resources:
        development:
          cpu: "0.5"
          memory: "512M"
        production:
          cpu: "2"
          memory: "2048M"
      healthcheck:
        test: "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-financial_data}"
        
    redis:
      image: "redis:7-alpine"
      container_name: "fks_redis"
      environment:
        REDIS_PASSWORD: "${REDIS_PASSWORD:-fks_redis_2025_secure!}"
      ports:
        - "${REDIS_PORT:-6379}:6379"
      command:
        - "redis-server"
        - "--requirepass ${REDIS_PASSWORD}"
        - "--appendonly yes"
        - "--maxmemory ${REDIS_MAXMEMORY:-512mb}"
        - "--maxmemory-policy ${REDIS_MAXMEMORY_POLICY:-allkeys-lru}"
      resources:
        development:
          cpu: "0.5"
          memory: "512M"
        production:
          cpu: "1"
          memory: "1024M"
      healthcheck:
        test: "redis-cli -a ${REDIS_PASSWORD} ping"
        
    nginx:
      image: "nginx:alpine"
      container_name: "fks_nginx"
      dockerfile: "./deployment/docker/nginx/Dockerfile"
      ports:
        - "${HTTP_PORT:-80}:80"
        - "${HTTPS_PORT:-443}:443"
      environment:
        DOMAIN_NAME: "${DOMAIN_NAME:-localhost}"
        ENABLE_SSL: "${ENABLE_SSL:-false}"
      resources:
        development:
          cpu: "0.25"
          memory: "128M"
        production:
          cpu: "0.5"
          memory: "256M"
      healthcheck:
        test: "curl --silent --fail http://localhost/health || exit 1"
  
  # Application Services
  applications:
    api:
      type: "python-cpu"
      container_name: "fks_api"
      build_context: "."
      dockerfile: "./deployment/docker/Dockerfile"
      service_port: "${API_PORT:-8000}"
      environment:
        SERVICE_TYPE: "api"
        SERVICE_PORT: "${API_PORT:-8000}"
        JWT_SECRET_KEY: "${JWT_SECRET_KEY}"
        CORS_ORIGINS: "${CORS_ORIGINS:-[\"*\"]}"
      volumes:
        - source: "./src/python"
          target: "/app/src"
          mode: "${SRC_MOUNT_MODE:-rw}"
        - source: "app_data"
          target: "/app/data"
        - source: "app_logs"
          target: "/app/logs"
      resources:
        development:
          cpu: "1"
          memory: "1024M"
        production:
          cpu: "${API_CPU_LIMIT:-2}"
          memory: "${API_MEMORY_LIMIT:-2048M}"
      healthcheck:
        test: "curl -f http://localhost:8000/health"
        interval: "30s"
        timeout: "10s"
        retries: 3
      dependencies:
        - postgres
        - redis
        
    worker:
      type: "python-cpu"
      container_name: "fks_worker"
      build_context: "."
      dockerfile: "./deployment/docker/Dockerfile"
      service_port: "${WORKER_PORT:-8001}"
      environment:
        SERVICE_TYPE: "worker"
        SERVICE_PORT: "${WORKER_PORT:-8001}"
        WORKER_COUNT: "${WORKER_COUNT:-2}"
      volumes:
        - source: "./src/python"
          target: "/app/src"
          mode: "${SRC_MOUNT_MODE:-rw}"
        - source: "app_data"
          target: "/app/data"
        - source: "app_logs"
          target: "/app/logs"
      resources:
        development:
          cpu: "1"
          memory: "1024M"
        production:
          cpu: "${WORKER_CPU_LIMIT:-2}"
          memory: "${WORKER_MEMORY_LIMIT:-2048M}"
      healthcheck:
        test: "curl -f http://localhost:8001/health"
      dependencies:
        - postgres
        - redis
        
    data:
      type: "python-cpu"
      container_name: "fks_data"
      service_port: "${DATA_PORT:-9001}"
      environment:
        SERVICE_TYPE: "data"
        SERVICE_PORT: "${DATA_PORT:-9001}"
      volumes:
        - source: "./src/python"
          target: "/app/src"
          mode: "${SRC_MOUNT_MODE:-rw}"
        - source: "app_data"
          target: "/app/data"
        - source: "app_logs"
          target: "/app/logs"
      resources:
        development:
          cpu: "1"
          memory: "1024M"
        production:
          cpu: "${DATA_CPU_LIMIT:-2}"
          memory: "${DATA_MEMORY_LIMIT:-2048M}"
      healthcheck:
        test: "curl -f http://localhost:9001/health"
      dependencies:
        - postgres
        - redis
        
    web:
      type: "python-cpu"
      container_name: "fks_web"
      service_port: "${WEB_PORT:-3000}"
      environment:
        SERVICE_TYPE: "web"
        SERVICE_PORT: "${WEB_PORT:-3000}"
        NODE_ENV: "${NODE_ENV:-development}"
        REACT_APP_API_URL: "${API_URL:-http://localhost:8000}"
      volumes:
        - source: "./src/web"
          target: "/app/src"
          mode: "${WEB_SRC_MOUNT_MODE:-rw}"
      resources:
        development:
          cpu: "0.5"
          memory: "512M"
        production:
          cpu: "${WEB_CPU_LIMIT:-1}"
          memory: "${WEB_MEMORY_LIMIT:-1024M}"
      healthcheck:
        test: "curl -f http://localhost:3000/health"
      dependencies:
        - api
        
    app:
      type: "python-cpu"
      container_name: "fks_app"
      service_port: "${APP_PORT:-9000}"
      environment:
        SERVICE_TYPE: "app"
        SERVICE_PORT: "${APP_PORT:-9000}"
        TRADING_MODE: "${TRADING_MODE:-paper}"
      volumes:
        - source: "./src/python"
          target: "/app/src"
          mode: "${SRC_MOUNT_MODE:-rw}"
        - source: "app_data"
          target: "/app/data"
        - source: "app_logs"
          target: "/app/logs"
      resources:
        development:
          cpu: "1"
          memory: "1024M"
        production:
          cpu: "2"
          memory: "2048M"
      healthcheck:
        test: "curl -f http://localhost:9000/health"
      dependencies:
        - api
        - data
        - worker
        
  # GPU Services
  gpu_services:
    training:
      type: "python-gpu"
      container_name: "fks_training"
      service_port: "${TRAINING_PORT:-8088}"
      environment:
        SERVICE_TYPE: "training"
        SERVICE_PORT: "${TRAINING_PORT:-8088}"
        CUDA_VISIBLE_DEVICES: "all"
      volumes:
        - source: "./src/python"
          target: "/app/src"
        - source: "./models"
          target: "/app/models"
        - source: "app_data"
          target: "/app/data"
      resources:
        gpu_count: "${TRAINING_GPU_COUNT:-1}"
        cpu: "4"
        memory: "8192M"
      healthcheck:
        test: "curl -f http://localhost:8088/health || nvidia-smi"
      profile: "gpu"
      
    transformer:
      type: "python-gpu"
      container_name: "fks_transformer"
      service_port: "${TRANSFORMER_PORT:-8089}"
      environment:
        SERVICE_TYPE: "transformer"
        SERVICE_PORT: "${TRANSFORMER_PORT:-8089}"
        CUDA_VISIBLE_DEVICES: "all"
      volumes:
        - source: "./src/python"
          target: "/app/src"
        - source: "./models"
          target: "/app/models"
      resources:
        gpu_count: "${TRANSFORMER_GPU_COUNT:-1}"
        cpu: "4"
        memory: "8192M"
      healthcheck:
        test: "curl -f http://localhost:8089/health || nvidia-smi"
      profile: "gpu"

# Kubernetes Configuration
kubernetes:
  namespace_prefix: "fks"
  
  # Resource defaults by environment
  resources:
    development:
      replicas: 1
      cpu_request: "100m"
      cpu_limit: "500m"
      memory_request: "128Mi"
      memory_limit: "512Mi"
    staging:
      replicas: 2
      cpu_request: "200m"
      cpu_limit: "1000m"
      memory_request: "256Mi"
      memory_limit: "1024Mi"
    production:
      replicas: 3
      cpu_request: "500m"
      cpu_limit: "2000m"
      memory_request: "512Mi"
      memory_limit: "2048Mi"
      
  # Ingress configuration
  ingress:
    enabled: true
    className: "nginx"
    tls:
      enabled: "${ENABLE_SSL:-false}"
      secretName: "fks_tls"
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/rate-limit: "100"
      
  # Storage classes
  storage:
    postgres:
      className: "fast-ssd"
      size: "20Gi"
    redis:
      className: "standard"
      size: "5Gi"
    app_data:
      className: "standard"
      size: "10Gi"

# Environment Variables Template
environment_variables:
  # Core settings
  APP_ENV: "${APP_ENV:-development}"
  APP_VERSION: "${APP_VERSION:-1.0.0}"
  APP_TIMEZONE: "${TZ:-America/New_York}"
  APP_LOG_LEVEL: "${APP_LOG_LEVEL:-INFO}"
  DEBUG_MODE: "${DEBUG_MODE:-false}"
  
  # Docker settings
  DOCKER_REGISTRY: "${DOCKER_REGISTRY:-docker.io}"
  DOCKER_NAMESPACE: "${DOCKER_NAMESPACE:-nuniesmith}"
  DOCKER_BUILDKIT: "1"
  COMPOSE_DOCKER_CLI_BUILD: "1"
  
  # Service ports
  API_PORT: "${API_PORT:-8000}"
  WORKER_PORT: "${WORKER_PORT:-8001}"
  WEB_PORT: "${WEB_PORT:-3000}"
  DATA_PORT: "${DATA_PORT:-9001}"
  APP_PORT: "${APP_PORT:-9000}"
  
  # Database settings
  POSTGRES_HOST: "postgres"
  POSTGRES_PORT: "${POSTGRES_PORT:-5432}"
  POSTGRES_DB: "${POSTGRES_DB:-financial_data}"
  POSTGRES_USER: "${POSTGRES_USER:-postgres}"
  POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-fks_postgres_2025_secure!}"
  
  REDIS_HOST: "redis"
  REDIS_PORT: "${REDIS_PORT:-6379}"
  REDIS_PASSWORD: "${REDIS_PASSWORD:-fks_redis_2025_secure!}"
  
  # Security
  JWT_SECRET_KEY: "${JWT_SECRET_KEY}"
  SECRET_KEY: "${SECRET_KEY}"
  
  # Health checks
  HEALTHCHECK_INTERVAL: "${HEALTHCHECK_INTERVAL:-30s}"
  HEALTHCHECK_TIMEOUT: "${HEALTHCHECK_TIMEOUT:-10s}"
  HEALTHCHECK_RETRIES: "${HEALTHCHECK_RETRIES:-3}"
  HEALTHCHECK_START_PERIOD: "${HEALTHCHECK_START_PERIOD:-60s}"

# Secret Management
secrets:
  # External secret references for production
  production:
    - name: "postgres-password"
      key: "POSTGRES_PASSWORD"
      source: "vault"
      path: "/secret/data/fks/postgres"
    - name: "redis-password"
      key: "REDIS_PASSWORD"
      source: "vault"
      path: "/secret/data/fks/redis"
    - name: "jwt-secret"
      key: "JWT_SECRET_KEY"
      source: "vault"
      path: "/secret/data/fks/jwt"
    - name: "docker-token"
      key: "DOCKER_TOKEN"
      source: "github-secrets"
      
  # Development secrets (use .env files)
  development:
    - name: "postgres-password"
      key: "POSTGRES_PASSWORD"
      source: "env-file"
      default: "fks_postgres_2025_secure!"
    - name: "redis-password"
      key: "REDIS_PASSWORD"
      source: "env-file"
      default: "fks_redis_2025_secure!"
